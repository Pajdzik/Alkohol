#version 330

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

in vec4 vertex;		// wspolrzedne wierzcholka w przestrzeni modelu
in vec4 normal;
in vec2 texture;
in vec4 observer;

out vec2 texCoords;
out vec4 observerPos;
out vec4 eye;
out vec4 iV;
out vec4 iN;
out vec4 iL1;
out vec4 iL2;

vec4 light1 = vec4(0, 100, 0, 1),							// wspó³rzêdne œwiat³a
	 light2 = vec4(1, 100, 1, 1);


void main(void) {
	gl_Position = P * V * M * vertex;
	eye = normalize(-gl_Position);
	texCoords = texture;
	vec4 obs = observer + vec4(0, 100, 0, 0);
	observerPos = observer * light1;

	iN = normalize(V*M*normal);						//wektor normalny w przestrzeni oka
	iV = normalize(obs - V*M*vertex);		//wektor do obserwatora w przestrzeni oka
	iL1 = normalize(V*light1 - V*M*vertex);			//wektor do swiatla w przestrzeni oka
	iL2 = normalize(V*observer*light2 - V*M*vertex);
}